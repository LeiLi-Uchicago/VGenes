>HA_Numbering
"""Script for HA numbering scheme conversions.Written by Jesse Bloom."""import osimport tempfileimport sysimport subprocessdef Align(headers_seqs, progpath, program='PROBCONS', musclegapopen=None):	"""Performs a multiple sequence alignment of two or more sequences.	By default, the protein sequences are aligned using PROBCONS.  This is		probably the most accurate alignment program.  However, it is		slow and consumes large amounts of memory if you are aligning		a very large number of sequences (typically if you are aligning		more than several hundred).  In that case, you may prefer to use		MUSCLE instead.  You can choose between the two with the 'program'		option.  If you decide to use MUSCLE, you can also align nucleotide		sequences with this program.	'headers_seqs' is a list specifying the names of the sequences that we		want to align.  Each entry is a 2-tuple '(head, seq)' where 'head' is		a header giving the sequence name and other information (might be empty)		and 'seq' is a string giving the protein sequence.  The list must have		at least 2 entries.	'progpath' should specify a directory containing the alignment program executable,		either PROBCONS or MUSCLE.  The PROBCONS executable is assumed to have		the name "probcons" in this directory.  The MUSCLE executable is assumed to		have the name "muscle" in this directory.	'program' specifies what program to use for the alignment.  By default, it is		"PROBCONS".  If you wish to use MUSCLE instead, set it to "MUSCLE".	'musclegapopen' sets the MUSCLE gap openining penalty to the specified		value. By default it is None, meaning we use the MUSCLE default penalty.		You can also set it to a number; for example -100 will lead to fewer gaps.	This executable is used to perform a multiple sequence alignment of the proteins		with the default settings of either PROBCONS or MUSCLE.  The returned variable is a		new list 'aligned_headers_seqs'.  Each entry is a 2-tuple '(head, aligned_seq)'.		'head' has the same meaning as on input (the sequence header) and		'aligned_seq' is the aligned sequence, with gaps inserted as '-'		as appropriate.  Therefore, all of the 'aligned_seq' entries in		'aligned_headers_seqs' are of the same length.  The entries in 'aligned_headers_seq'		are in the same order as in the input list 'headers_seqs'.	"""	if not (isinstance(headers_seqs, list) and len(headers_seqs) >= 2):		raise ValueError, 'header_seqs does not specify a list with at least two entries.'	if not os.path.isdir(progpath):		raise ValueError, "Cannot find directory %s." % progpath	if program == 'PROBCONS':		exe = os.path.abspath("%s/probcons" % progpath)  # the executable	elif program == 'MUSCLE':		exe = os.path.abspath("%s/muscle" % progpath)  # the executable	else:		raise ValueError, "Invalid value of %s for 'program'." % (str(program))	if not os.path.isfile(exe):		raise IOError, "Cannot find executable at %s." % exe	currdir = os.getcwd()	tempdir = tempfile.mkdtemp()	try:		# do stuff in a temporary directory		infile = "%s/in.fasta" % tempdir  # input file		outfile = "%s/out.fasta" % tempdir  # output file		WriteFASTA(headers_seqs, infile)  # write sequences to the input file		if program == 'PROBCONS':			p = subprocess.Popen("%s %s" % (exe, infile), shell=True, stdout=subprocess.PIPE,			                     stderr=subprocess.PIPE)  # run ProbCons			(output, errors) = p.communicate()			open(outfile, 'w').write(output)		elif program == 'MUSCLE':			if musclegapopen != None:				p = subprocess.Popen("%s -gapopen %d -in %s -out %s" % (exe, musclegapopen, infile, outfile),				                     shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)  # run MUSCLE			else:				p = subprocess.Popen("%s -in %s -out %s" % (exe, infile, outfile), shell=True, stdout=subprocess.PIPE,				                     stderr=subprocess.PIPE)  # run MUSCLE			(output, errors) = p.communicate()		try:			aligned_headers_seqs = ReadFASTA(outfile)		except:			sys.stderr.write("Error getting alignment output, error of %s" % errors)			raise	finally:		os.chdir(currdir)  # return to the original directory		for file in os.listdir(tempdir):			os.remove("%s/%s" % (tempdir, file))  # remove files from temporary directory		os.rmdir(tempdir)  # remove temporary directory	if len(aligned_headers_seqs) != len(headers_seqs):		raise ValueError, "Did not return the correct number of aligned sequences."	# put the aligned sequences in the same order as the input sequences	n = len(aligned_headers_seqs[0][1])  # length of aligned sequences	d = dict(aligned_headers_seqs)	aligned_headers_seqs = []	for (head, seq) in headers_seqs:		try:			alignedseq = d[head]		except KeyError:			raise ValueError, "After alignment, the following header is missing: %s" % head		if len(alignedseq) != n:			open('errors.temp', 'w').write(errors)			raise ValueError, "Aligned sequence %s is not of length %d: if you are using MUSCLE, you may be running out of memory.  Errors have been written to errors.temp." % (			alignedseq, n)		if len(seq) > n:			open('errors.temp', 'w').write(errors)			raise ValueError, "Unaligned seq %s is longer than aligned length of %d: if you are using MUSCLE, you many be running out of memory.  Errors have been written to errors.temp." % (			seq, n)		aligned_headers_seqs.append((head, alignedseq))	return aligned_headers_seqs  # return the aligned sequencesdef StripGapsToFirstSequence(aligned_headers_seqs):	"""Strips gaps from a reference sequence, and all corresponding alignments.	On input, 'aligned_headers_seqs' should be a set of two or more aligned sequences,		as would be returned by 'Align'.	The first sequence in this alignment is taken to correspond to the reference sequence.		The returned variable is a list similar to aligned_headers_seqs, but with		all positions corresponding to gaps in this reference sequence stripped away.		All gaps ('-') characters are removed from this reference sequence.  In addition,		in all other aligned sequences in 'aligned_headers_seqs', every character at		the same position as a gap in the reference sequence is removed.  Therefore,		at the end of this procedure, all of the alignments have the same length		as the reference sequence with its gaps stripped away.  The headers are		unchanged.  The order of sequences in this stripped alignment is also		unchanged.	>>> StripGapsToFirstSequence([('s1', '-AT-A-GC'), ('s2', 'AAT-TAGC'), ('s3', '--T-A-GC')])	[('s1', 'ATAGC'), ('s2', 'ATTGC'), ('s3', '-TAGC')]	"""	if not (isinstance(aligned_headers_seqs, list) and len(aligned_headers_seqs) >= 2):		raise ValueError, "aligned_headers_seqs does not specify at least two aligned sequences."	(ref_head, ref_seq) = aligned_headers_seqs[0]	non_strip_positions = []  # positions not to strip away	stripped_ref_seq = []	for i in range(len(ref_seq)):		r = ref_seq[i]		if r != '-':			non_strip_positions.append(i)			stripped_ref_seq.append(r)	stripped_headers_seqs = [(ref_head, ''.join(stripped_ref_seq))]	for (ihead, iseq) in aligned_headers_seqs[1:]:		istrippedseq = ''.join([iseq[i] for i in non_strip_positions])		stripped_headers_seqs.append((ihead, istrippedseq))	return stripped_headers_seqsdef WriteFASTA(headers_seqs, filename, writable_file=False):	"""Writes sequences to a FASTA file.	'headers_seqs' is a list of 2-tuples specifying sequences and their		corresponding headers.  Each entry is the 2-tuple '(header, seq)'		where 'header' is a string giving the header (without the leading ">"),		and 'seq' is the corresponding sequence.	'filename' is a string that specifies the name of the file to which the		headers and sequences should be written.  If this file already exists,		it is overwritten.	'writable_file' is a Boolean switch specifying that rather than 'filename'		giving a string specifying the name of a file to which the sequences		should be written, it instead specifies a writable file object to which		the sequences should be written.	The sequences are written to the file in the same order that they are specified		in 'headers_seqs'.	"""	assert isinstance(writable_file, bool)	if writable_file:		f = filename	else:		f = open(filename, 'w')	for (header, seq) in headers_seqs:		f.write(">%s\n%s\n" % (header, seq))	if not writable_file:		f.close()def ReadFASTA(fastafile):	"""Reads sequences from a FASTA file.	'fastafile' should specify the name of a FASTA file.	This function reads all sequences from the FASTA file.  It returns the		list 'headers_seqs'.  This list is composed of a 2-tuple '(header, seq)'		for every sequence entry in FASTA file.  'header' is the header for		a sequence, with the leading ">" and any trailing spaces removed. 'seq'		is the corresponding sequence.	"""	lines = open(fastafile).readlines()	headers_seqs = []	header = None	seq = []	for line in lines:		if line[0] == '>':			if (not header) and (not seq):				pass  # first sequence in file			elif header and not seq:				raise ValueError, "Empty sequence for %s" % header			elif seq and not header:				raise ValueError, "File does not begin with header."			else:				seq = ''.join(seq)				seq = seq.replace(' ', '')				headers_seqs.append((header, seq))			header = line.strip()[1:]			seq = []		else:			seq.append(line.strip())	if (not header) and (not seq):		pass  # first sequence in file	elif header and not seq:		raise ValueError, "Empty sequence for %s" % header	elif seq and not header:		raise ValueError, "File does not begin with header."	else:		seq = ''.join(seq)		seq = seq.replace(' ', '')		headers_seqs.append((header, seq))	return headers_seqsdef GetCorrespondingResidue(seqs, i):	"""Gets the corresponding residue number for two aligned sequences.	*seqs* is a set of two aligned sequences as *(head, sequence)* 2-tuples.	*i* is the number of a residue in sequential numbering of *seqs[0]*	without considering any of the gaps induced by alignment, in 1, 2, ...	numbering.	Returns the number of the residue in sequential numbering of *seqs[1]*	without considering any of the gaps induced by alignment in 1, 2, ...	numbering. Returns *None* if residue *i* of *seqs[0]* aligns with a	gap in *seqs[1]*.	"""	assert len(seqs) == 2	s1 = seqs[0][1]	s2 = seqs[1][1]	assert len(s1) == len(s2)	assert 1 <= i <= len(s1)	s1index = s2index = 0	for j in range(len(s1)):		if s1[j] != '-':			s1index += 1		if s2[j] != '-':			s2index += 1		if s1index == i:			if s2[j] == '-':				return None			else:				return s2indexdef main():	"""Main body of script."""	print	"\nBeginning execution of HA_numbering.py script."	# parse arguments	args = sys.argv[1:]	if len(args) != 1:		raise IOError("Script must be called with exactly one argument specifying the input file.")	infile = args[0]	print	"Reading input from %s" % infile	if not os.path.isfile(infile):		raise IOError("Cannot find infile of %s in the current directory." % infile)	lines = [line.split(None, 1) for line in open(infile) if not line.isspace()]	if len(lines) != 3:		raise IOError("Failed to find exactly three non-empty lines in infile")	if lines[0][0] == 'probconspath' and len(lines[0]) == 2:		alignerpath = lines[0][1].strip()		if not os.path.isdir(alignerpath):			raise IOError("The directory of %s specified by probconspath does not exist." % (alignerpath))		prog = 'PROBCONS'	elif lines[0][0] == 'musclepath' and len(lines[0]) == 2:		alignerpath = lines[0][1].strip()		if not os.path.isdir(alignerpath):			raise IOError("The directory of %s specified by musclepath does not exist." % (alignerpath))		prog = 'MUSCLE'	else:		raise IOError("First line does not specify probconspath or musclepath")	if lines[1][0] == 'ha_sequence' and len(lines[0]) == 2:		ha_sequence = lines[1][1].strip().upper()	else:		raise IOError("Second line does not specify ha_sequence")	if lines[2][0] == 'sites' and len(lines[0]) == 2:		try:			sites = [int(x) for x in lines[2][1].split()]		except ValueError:			raise ValueError("sites does not specify valid integer site numbers.")	else:		raise IOError("Third line does not specify sites")	# Define sequences and their numbering conversions.	# The sequences are in seq_d and keyed by PDB code.	# The number conversions from sequential numbering of these sequences to	# th number labels are in label_d and keyed by PDB codes.	seq_names = ['4HMG', '4JTV']	seq_d = {}	label_d = {}	seq_4hmg_a = \		'QDLPGNDNSTATLCLGHHAVPNGTLVKTITDDQIEVTNATELVQSSSTGKICNNPHRILDGIDCTLIDALLGDPHCDVFQ' + \		'NETWDLFVERSKAFSNCYPYDVPDYASLRSLVASSGTLEFITEGFTWTGVTQNGGSNACKRGPGSGFFSRLNWLTKSGST' + \		'YPVLNVTMPNNDNFDKLYIWGIHHPSTNQEQTSLYVQASGRVTVSTRRSQQTIIPNIGSRPWVRGQSSRISIYWTIVKPG' + \		'DVLVINSNGNLIAPRGYFKMRTGKSSIMRSDAPIDTCISECITPNGSIPNDKPFQNVNKITYGACPKYVKQNTLKLATGM' + \		'RNVPEKQT'	seq_4hmg_b = \		'GLFGAIAGFIENGWEGMIDGWYGFRHQNSEGTGQAADLKSTQAAIDQINGKLNRVIEKTNEKFHQIEKEFSEVEGRIQDL' + \		'EKYVEDTKIDLWSYNAELLVALENQHTIDLTDSEMNKLFEKTRRQLRENAEEMGNGCFKIYHKCDNACIESIRNGTYDHD' + \		'VYRDEALNNRFQIKG'	seq_d['4HMG'] = seq_4hmg_a + seq_4hmg_b	label_d['4HMG'] = dict([(i + 1, '%d in HA1' % (i + 1)) for i in range(len(seq_4hmg_a))] + [		(len(seq_4hmg_a) + i + 1, '%d in HA2' % (i + 1)) for i in range(len(seq_4hmg_b))])	assert len(seq_d['4HMG']) == len(label_d['4HMG'])	seq_4jtv_a = \		'DTLCIGYHANNSTDTVDTVLEKNVTVTHSVNLLEDKHNGKLCKLRGVAPLHLGKCNIAGWILGNPECESLSTASSWSYIV' + \		'ETPSSDNGTCYPGDFIDYEELREQLSSVSSFERFEIFPKTSSWPNHDSNKGVTAACPHAGAKSFYKNLIWLVKKGNSYPK' + \		'LSKSYINDKGKEVLVLWGIHHPSTSADQQSLYQNADTYVFVGSSRYSKKFKPEIAIRPKVRDQEGRMNYYWTLVEPGDKI' + \		'TFEATGNLVVPRYAFAMERNAGSGIIISDTPVHDCNTTCQTPKGAINTSLPFQNIHPITIGKCPKYVKSTKLRLATGLRN' + \		'I'	seq_4jtv_b = \		'GLFGAIAGFIEGGWTGMVDGWYGYHHQNEQGSGYAADLKSTQNAIDEITNKVNSVIEKMNTQFTAVGKEFNHLEKRIENL' + \		'NKKVDDGFLDIWTYNAELLVLLENERTLDYHDSNVKNLYEKVRSQLKNNAKEIGNGCFEFYHKCDNTCMESVKNGTYDYP' + \		'KY'	seq_d['4JTV'] = seq_4jtv_a + seq_4jtv_b	label_d['4JTV'] = dict([(i + 1, '%d of HA1' % (i + 7)) for i in range(len(seq_4jtv_a))] + [		(len(seq_4jtv_a) + i + 1, '%d of HA2' % (i + 1)) for i in range(len(seq_4jtv_b))])	assert len(seq_d['4JTV']) == len(label_d['4JTV'])	# make alignments	print	"Making %s alignments..." % prog	alignments = {}	for seqname in seq_names:		alignments[seqname] = Align([('seq', ha_sequence), (seqname, seq_d[seqname])], alignerpath, prog)	print	"Alignments complete.\n\nHere are the corresponding residue numbers:"	for site in sites:		if not (1 <= site <= len(ha_sequence)):			raise ValueError(				"site %d is outside the valid range for sequential numbering of ha_sequence starting at 1." % site)		sitestring = ['\nResidue %s%d in sequential numbering of your HA sequence corresponds to:' % (		ha_sequence[site - 1], site)]		for seqname in seq_names:			i = GetCorrespondingResidue(alignments[seqname], site)			if i == None:				sitestring.append('  * an alignment gap in %s' % seqname)			else:				if not (1 <= i <= len(seq_d[seqname])):					raise ValueError(						"Invalid corrresponding residue for %s -- something is wrong with this program" % seqname)				aa = seq_d[seqname][i - 1]				sitestring.append('  * %s%s in %s' % (aa, label_d[seqname][i], seqname))		print		'\n'.join(sitestring)	print	"\nScript complete."main()
>VGenesCloneCaller
__author__ = 'wilsonp'import VGenesSeqfrom operator import itemgetterfrom math import ceilimport osdef CloneCaller(DataList, Duplicates):    # 'SeqName', 'VLocus', 'JLocus', 'CDR3Length', 'CDR3DNA', 'Mutations', 'Vbeg', 'Vend', 'Sequence', 'ID', 'GVend', 'GJbeg', 'GD1beg', 'GD1end'    # 0             1        2            3           4          5           6       7         8        9       10       11       12        13    DataList.sort(key=itemgetter(1,2,3)) #sort data list by Vlocus, Jlocus, and CDR3 length    i = 0    r = 0    StartNew = False    NewList = []    PrePools = []    NewPools = []    for record in DataList:        # Sequence = record[1]        CDR3 = record[4]        # CDR1from = int(record[7])        # if len(CDR3) > 0:        if r+1 < len(DataList):            if StartNew == False:                NewList.clear()                NewList.append(record)                # test1 = record[3]                # test2 = DataList[i+1][3]            SeNm = record[0]            CSeNm = DataList[r + 1][0]            VGene = record[1]            CVgene = DataList[r+1][1]            JGene = record[2]            CJgene = DataList[r + 1][2]            CDR3leng = record[3]            CCDR3leng = DataList[r + 1][3]            if record[1] == DataList[r+1][1] and record[2] == DataList[r+1][2] and record[3] == DataList[r+1][3]: #has same V, J and CDR3 length and CDR3 is >2                StartNew = True                NewList.append(DataList[r+1])            else:                if len(NewList) > 1:                    PrePools.append(tuple(NewList))                    NewList.clear()                StartNew = False        r += 1        # else:        #     r += 1    if len(NewList) > 1:        PrePools.append(tuple(NewList))    SeqDict = []    i =0    MutFreqDict = {}    ClonalPools = []    # 'SeqName', 'VLocus', 'JLocus', 'CDR3Length', 'CDR3DNA', 'Mutations', 'Vbeg', 'Vend', 'Sequence', 'ID'    # 0             1        2            3           4          5           6       7         8        9    for pool in PrePools:        SeqDict.clear()        NearPool = []        for record in pool:            Seqname = record[0]            Sequence = record[8]            NewList.clear()            # CDR3 = Sequence[int(record[11]):int(record[12])]            CDR3 = record[4]            NewList.append(Seqname)            NewList.append(Sequence)            SeqDict.append(tuple(NewList))            Mutations = record[5]            MutList = Mutations.split(',')            Vend = int(record[7])            Vbeg = int(record[6])            VLen = (Vend+1)-Vbeg            Vmuts  = 0            for mutation in MutList:                mut = str(mutation)                MutParse = mut.split('-')                try:                    if int(MutParse[1]) < (Vend + 1):                        Vmuts += 1                except:                    Vmuts = Vmuts                if VLen > 0:                    VMutFreq = Vmuts/ VLen                else:                    VMutFreq = 0                    print('Problem with Vlen = 0 for ' + Seqname)            # VMuts = 0            # for i in range(0, len(CDRSeq)-1):            #     try:            #         if CDRSeq[i] != GCDRSeq[i]:            #             CDRMuts +=1            #     except:            #         print('miss')            # if CDRMuts > 0:            #     CDRMutFreq =  CDRMuts/len(CDRSeq)#+1            # else:            #     CDRMutFreq = 0.0            # # the +1 is for seq errors            # Mutations = record[13]            # MutList = Mutations.split(',')            # Vend = int(record[14])            MutFreqDict[Seqname] = (VMutFreq, CDR3, MutList, Vend)        outfilename = VGenesSeq.ClustalO(SeqDict, 1000, False)        # outfilename = os.path.join(os.path.expanduser('~'), 'Applications', 'VGenes','ClustalOmega', 'my-out-seqs.fa')        Aligned = VGenesSeq.readClustalOutput(outfilename)        os.remove(outfilename)        Similars = {}        SimPool = []        Matches = []        Different = []        i = 0        LastSeqName = ''        for seq in range(0,len(Aligned)-1):            try:                SeqName = Aligned[seq][0]                if SeqName == '':                    print('bad')                VMutFreq = MutFreqDict[SeqName][0]                CDR3 = MutFreqDict[SeqName][1]                CDR3dif = VMutFreq * len(CDR3)            except:                CDR3dif = 0            CCDR3 = ''            SimPool.clear()            SimPool.append(SeqName)            # DupPool.clear()            # DupPool.append(SeqName)            for comp in range(seq+1, len(Aligned)):                try:                    CSeqName = Aligned[comp][0] #comparison SeqName, etc                    CVMutFreq = MutFreqDict[CSeqName][0]                    CCDR3 = MutFreqDict[CSeqName][1]                except:                    CVMutFreq = 0                if Duplicates == False:                    CCDR3dif = CVMutFreq * len(CCDR3)                    SeventyFivePercent = len(CDR3)- int(0.75*len(CDR3))                    differences = 0                    AllowedDif = CDR3dif + 1 #+ CCDR3dif                    # if AllowedDif < 1 and CDR3dif >0 and CCDR3dif >0: AllowedDif = 1                    # AllowedDif+=1 # might need 2...but this is eror rate                    AllowedDif = ceil(AllowedDif)                    for j in range(0, len(CDR3)-1):                        try:                            if CDR3[j] != CCDR3[j]:                                differences += 1                        except:                            print('stop')                else:                    try:                        if CDR3 == CCDR3:                            differences = 1                        else:                            differences = 0                    except:                        differences = 0                if Duplicates == False:                    try:                        if differences <= AllowedDif:                            # SimPool.append(SeqName)                            SimPool.append(CSeqName)                        elif differences <= SeventyFivePercent:  # if 75% nucleotides are shared in CDR3 and also share 1% base exchanges (3/~300), then counted as clonal                            MutList = MutFreqDict[SeqName][2]                            # NumMuts = len(MutList)                            # Vend = MutFreqDict[SeqName][3]                            MutListComp = MutFreqDict[CSeqName][2]                            # NumMutsComp = len(MutListComp)                            # VendComp = MutFreqDict[CSeqName][3]                            Matches.clear()                            Matches = [element for element in MutList if element in MutListComp]                            if len(Matches)>3:  #need get average shared + 2SD from clones for this instead of arbitrary 3                                SimPool.append(CSeqName)                        else:                            if differences == 0:                                MutList = MutFreqDict[SeqName][2]                                MutListComp = MutFreqDict[CSeqName][2]                                if MutList == MutListComp:                                    SimPool.append(CSeqName)                    except:                        SimPool.append(CSeqName)                # i+=1            if len(SimPool) > 1:                # because aligned now can check if this one has everything in previous                # already and only add to Similars dict if something differs                # only need to find when stuff is different from list that already exists                if len(Similars) >0:                    SetLast = list(Similars[LastSeqName]) #set(Similars[LastSeqName])                    Matches.clear()                    # Different.clear()                    Matches = [element for element in SimPool if element in SetLast]                    if len(Matches) > 0: #if some match                        SetLast += [element for element in SimPool if element not in SetLast]                        Entry = tuple(SetLast)                        Similars[LastSeqName] = Entry  #update                    else:                        Entry = tuple(SimPool)  #Start  new one                        Similars[SeqName] = Entry                        LastSeqName = SeqName                elif len(Similars) == 0:                    Entry = tuple(SimPool)                    Similars[SeqName] = Entry                    LastSeqName = SeqName        Different.clear()        Pools = list(Similars.keys())        # i=0        KeepList = []        if len(Similars) >1:            for i in range(0,len(Pools)-1):                SimPoolName = Pools[i]                SimPool = list(Similars[SimPoolName])                if len(SimPool) != 0:                    for j in range(i+1,len(Pools)):                        NextName = Pools[j]                        nextset = list(Similars[NextName])                        Matches = [element for element in SimPool if element in nextset]                        if len(Matches) > 0:                            Different = [element for element in nextset if element not in SimPool]                            SimPool = SimPool + Different                            Similars[SimPoolName] = tuple(SimPool)                            Similars[NextName] = ''            # could marge  test name and make rest merged empty so no further matches            # in end iterate through and make list of tuples of all final merged lists            # Different.append(list(set))        NewPools.clear()        for i in range(0,len(Pools)):  #code to remove empty, merged pools and convert from dictionary to lists            SimPoolName = Pools[i]            SimPool = list(Similars[SimPoolName])            if len(SimPool) != 0:                NewPools.append(SimPool)        for pool in NewPools:  #removes duplicates from list, faster then finding records and remarking as clonal later            NearPool = pool            NearPool.sort()            Lennear = len(NearPool)-1            for k in range (0, Lennear):                try:                    if k < (len(NearPool)-1):                        if k > 0 and NearPool[k] == NearPool[k-1]:                            NearPool.remove(NearPool[k])                except:                    print('Stop')            if len(NearPool) >1: ClonalPools.append(tuple(NearPool))  #after dups removed if still pool add to final list of clonal pools    return ClonalPools# calculates CDR mutation frequency and uses that as the cutoff for# mutation frequency allowed in the CDR3#todo need to calculat standard deviation as well and allow within# it then orders sequences by clustalO and scores CDR3 differences# in order to see if different from CDR frequnecies
>VGenesDialogues
__author__ = 'wilsonp'from PyQt5 import QtWidgets, QtGui, QtCoreimport osglobal LastFileNameLastFileName = ''def newFile(self):            global LastFileName            if LastFileName != '':                workingdir, filename = os.path.split(LastFileName)                os.chdir(workingdir)            options = QtWidgets.QFileDialog.Options()            # options |= QtWidgets.QFileDialog.DontUseNativeDialog            DBFilename, _ = QtWidgets.QFileDialog.getSaveFileName(self, "New Database", "New database", "All Files (*);;SqLLite database Files (*.db)", options=options)            LastFileName = DBFilename            return DBFilenamedef saveFile(self, typeSave):    import time    options = QtWidgets.QFileDialog.Options()    global LastFileName    if LastFileName != '':        if len(LastFileName)==1:            workingdir, filename = os.path.split(LastFileName)            os.chdir(workingdir)        elif len(LastFileName)>1:            workingdir, filename = os.path.split(LastFileName[0])            os.chdir(workingdir)    if typeSave == 'db':        queryIs = "Database " + time.strftime('%c')        FileTypes  = "VGenes database Files (*.vdb);;All Files (*)"    elif typeSave == 'Nucleotide':        queryIs = "FASTA " + time.strftime('%c')        FileTypes  = "Nucleotide Files (*.nt);;FASTA Files (*.fasta);;Text Files (*.txt);;All Files (*)"    elif typeSave == 'FASTA':        queryIs = "FASTA " + time.strftime('%c')        FileTypes  = "FASTA Files (*.fasta);;Nucleotide Files (*.nt);;Text Files (*.txt);;All Files (*)"    elif typeSave == 'fastq':        # queryIs = "What do you want to name the merged fastq file?" + time.strftime('%c')        filenamed = ''        # LastName = LastFileName[0]        workingdir, filename = os.path.split(LastFileName[0])        cutto = len(filename)-6        filename = filename[:cutto]        filenamed = filename + '_x_'        workingdir, filename = os.path.split(LastFileName[1])        cutto = len(filename)-6        filename = filename[:cutto]        filenamed = filenamed + filename        queryIs = filenamed + '_Merged'        FileTypes  = "fastq Files (*.fastq);;fq Files (*.fq);;All Files (*)"    elif typeSave == 'seq':        queryIs = "Sequence " + time.strftime('%c')        FileTypes  = "All Files (*);;Seq Files (*.seq);;Text Files (*.txt)"    elif typeSave == 'csv' or 'CSV':        queryIs = "CSV " + time.strftime('%c')        FileTypes  = "comma separated values (*.csv);;All Files (*)"    elif typeSave == 'text':        queryIs = "Text: " + time.strftime('%c')        FileTypes  = "text (*.txt);;All Files (*)"    # options |= QtWidgets.QFileDialog.DontUseNativeDialog    Filename, _ = QtWidgets.QFileDialog.getSaveFileName(self, queryIs, queryIs, FileTypes, options=options)    if Filename:        LastFileName = Filename        return Filenamedef openFile(self, typeOpen):    global LastFileName    queryIs = ''    FileTypes = ''    if LastFileName != '':        workingdir, filename = os.path.split(LastFileName)        os.chdir(workingdir)    if typeOpen == 'db':        queryIs = "Open Database"        FileTypes  = "VGenes database Files (*.vdb);;"    elif typeOpen == 'Nucleotide':        queryIs = "Open nucleotide file"        FileTypes = "Nucleotide Files (*.nt);;FASTA Files (*.fasta);;Text Files (*.txt);;All Files (*)"    elif typeOpen == 'FASTA':        queryIs = "FASTA "        FileTypes = "FASTA Files (*.fasta);;Nucleotide Files (*.nt);;Text Files (*.txt);;All Files (*)"    elif typeOpen == 'seq':        queryIs = "Open a single sequence file"        FileTypes  = "All Files (*);;Seq Files (*.seq);;Text Files (*.txt)"    elif typeOpen == 'CSV':        queryIs = "Open a Comma Separated Values file"        FileTypes  = "All Files (*);;CSV Files (*.csv);;Text Files (*.txt)"    elif typeOpen == 'All':        queryIs = "All file types"        FileTypes  = "All Files (*);;"    options = QtWidgets.QFileDialog.Options()    # options |= QtWidgets.QFileDialog.DontUseNativeDialog    fileName, _ = QtWidgets.QFileDialog.getOpenFileName(self,            queryIs,            queryIs,            FileTypes, options=options)    if fileName:        LastFileName = fileName        return fileNamedef openFiles(self, typeOpen):    global LastFileName    if LastFileName != '' and len(LastFileName) == 1:        workingdir, filename = os.path.split(LastFileName)        os.chdir(workingdir)    if typeOpen == 'db':        queryIs = "Open Database"        FileTypes  = "VGenes database Files (*.vdb);;"    elif typeOpen == 'Nucleotide':        queryIs = "Open nucleotide file"        FileTypes = "Nucleotide Files (*.nt);;FASTA Files (*.fasta);;Text Files (*.txt);;All Files (*)"    elif typeOpen == 'FASTA':        queryIs = "FASTA "        FileTypes = "FASTA Files (*.fasta);;Nucleotide Files (*.nt);;Text Files (*.txt);;All Files (*)"    elif typeOpen == 'seq':        queryIs = "Open a single sequence file"        FileTypes  = "All Files (*);;Seq Files (*.seq);;Text Files (*.txt)"    elif typeOpen == 'CSV':        queryIs = "Open a Comma Separated Values file"        FileTypes  = "All Files (*);;CSV Files (*.csv);;Text Files (*.txt)"    elif typeOpen == 'All':        queryIs = "All file types"        FileTypes  = "All Files (*);;"    # queryIs = "Open single sequence files"    # FileTypes  = "All Files (*);;Seq Files (*.seq);;Text Files (*.txt)"    options = QtWidgets.QFileDialog.Options()    # options |= QtWidgets.QFileDialog.DontUseNativeDialog    fileName, _ = QtWidgets.QFileDialog.getOpenFileNames(self,            queryIs,            queryIs,            FileTypes, options=options)    if fileName:        LastFileName = fileName[0]        return fileNamedef openfastq(self):    global LastFileName    if LastFileName != '' and len(LastFileName) == 1:        workingdir, filename = os.path.split(LastFileName)        os.chdir(workingdir)    queryIs = "Choose two paired fastq files to be merged"    FileTypes  = "fastq Files (*.fastq);;fq Files (*.fq);;Text Files (*.txt);;All Files (*)"    options = QtWidgets.QFileDialog.Options()    # options |= QtWidgets.QFileDialog.DontUseNativeDialog    fileName, _ = QtWidgets.QFileDialog.getOpenFileNames(self,            queryIs,            queryIs,            FileTypes, options=options)    if fileName:        LastFileName = fileName        return fileNamedef progressDialogue(self):    response = QtWidgets.QProgressDialog()def questionMessage(self, question, buttons):    type = ''    if buttons == 'YN':        type = QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes    elif buttons == "YNC":        type  = QtWidgets.QMessageBox.Cancel | QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes # , QtWidgets.QMessageBox.Yes    elif buttons == "YC":        type  = QtWidgets.QMessageBox.Cancel | QtWidgets.QMessageBox.Yes # , QtWidgets.QMessageBox.Yes    elif buttons == "OKC":        type  = QtWidgets.QMessageBox.Cancel | QtWidgets.QMessageBox.Ok # | QtWidgets.QMessageBox.Yes # , QtWidgets.QMessageBox.Yes    elif buttons == 'OK':        type  = QtWidgets.QMessageBox.Ok #  | QtWidgets.QMessageBox.Yes # , QtWidgets.QMessageBox.Yes    elif buttons == "YNCA":        type  = QtWidgets.QMessageBox.Cancel | QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.NoToAll | QtWidgets.QMessageBox.YesToAll# , QtWidgets.QMessageBox.Yes    # QtWidgets.QMessageBox.setDefaultButton(self, QtWidgets.QMessageBox.Yes)    reply = QtWidgets.QMessageBox.question(self, "QMessageBox.question()", question, type)    if reply == QtWidgets.QMessageBox.Yes:        return 'Yes'    elif reply == QtWidgets.QMessageBox.No:        return 'No'    elif reply == QtWidgets.QMessageBox.Ok:        return 'OK'    elif reply == QtWidgets.QMessageBox.NoToAll:        return 'NoToAll'    elif reply == QtWidgets.QMessageBox.YesToAll:        return 'YesToAll'    else:        return 'Cancel'def informationMessage(self, statement, buttons):    #    # reply = QtWidgets.QMessageBox.information(self,    #         "QMessageBox.information()", statement)    # if reply == QtWidgets.QMessageBox.Ok:    #     self.informationLabel.setText("OK")    # else:    #     self.informationLabel.setText("Escape")    # #    #    type = ''    if buttons == 'YN':        type = QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes    elif buttons == "YNC":        type  = QtWidgets.QMessageBox.Cancel | QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes # , QtWidgets.QMessageBox.Yes    elif buttons == "OKC":        type  = QtWidgets.QMessageBox.Cancel | QtWidgets.QMessageBox.Ok # | QtWidgets.QMessageBox.Yes # , QtWidgets.QMessageBox.Yes    elif buttons == 'OK':        type  = QtWidgets.QMessageBox.Ok #  | QtWidgets.QMessageBox.Yes # , QtWidgets.QMessageBox.Yes    # QtWidgets.QMessageBox.setDefaultButton(self, QtWidgets.QMessageBox.Yes)    reply = QtWidgets.QMessageBox.information(self, "QMessageBox.information()", statement, type)    if reply == QtWidgets.QMessageBox.Yes:        return 'Yes'    elif reply == QtWidgets.QMessageBox.No:        return 'No'    elif reply == QtWidgets.QMessageBox.Ok:        return 'OK'    elif reply == QtWidgets.QMessageBox.Cancel:        return 'Cancel'def getItemDial(self, queryIs, items):    # dialogue to generate combo box, OK, cancel    item, ok = QtWidgets.QInputDialog.getItem(self, "QInputDialog.getItem()",            queryIs, items, 0, False)    if ok and item:        return itemdef setText(self, QueryIS, DefaultText):    text, ok = QtWidgets.QInputDialog.getText(self, "Input",            QueryIS, QtWidgets.QLineEdit.Normal, DefaultText) #QtCore.QDir.home().dirName())            # QueryIS, DefaultText, QtCore.QDir.home().dirName())    if ok and text != '':        return text    else:        return 'Cancelled Action'def setItem(self, items, title):    # items = ("Spring", "Summer", "Fall", "Winter")    item, ok = QtWidgets.QInputDialog.getItem(self, "QInputDialog.getItem()",            title, items, 0, False)    if ok and item:        return item    else:        return'Cancel'
